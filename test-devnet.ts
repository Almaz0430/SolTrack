import * as anchor from "@coral-xyz/anchor";
import { PublicKey, SystemProgram, Transaction } from "@solana/web3.js";
import {
  createInitializeMintInstruction,
  getAssociatedTokenAddress,
  createAssociatedTokenAccountInstruction,
  TOKEN_PROGRAM_ID,
} from "@solana/spl-token";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è devnet
const connection = new anchor.web3.Connection("https://api.devnet.solana.com");
const keypair = anchor.web3.Keypair.fromSecretKey(
  new Uint8Array(JSON.parse(require('fs').readFileSync('/home/yaroslav/.config/solana/id.json', 'utf8')))
);
const wallet = new anchor.Wallet(keypair);
const provider = new anchor.AnchorProvider(connection, wallet, {});
anchor.setProvider(provider);

// –ó–∞–≥—Ä—É–∂–∞–µ–º IDL
const idl = require("./target/idl/music_nft.json");
const programId = new PublicKey("9ysQaigie6LHeqMEWGMWBYkdXFg4zyHhBnxzmZdMzG7T");
const program = new anchor.Program(idl, provider);

async function testDevnet() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Music NFT –Ω–∞ devnet...");
  console.log("Program ID:", programId.toString());
  console.log("Wallet:", provider.wallet.publicKey.toString());

  try {
    // –°–æ–∑–¥–∞–µ–º mint –¥–ª—è NFT
    const mint = anchor.web3.Keypair.generate();
    console.log("Mint:", mint.publicKey.toString());

    // –°–æ–∑–¥–∞–µ–º mint-–∞–∫–∫–∞—É–Ω—Ç
    const lamportsForMint = await provider.connection.getMinimumBalanceForRentExemption(82);
    const createMintTx = new Transaction().add(
      SystemProgram.createAccount({
        fromPubkey: provider.wallet.publicKey,
        newAccountPubkey: mint.publicKey,
        space: 82,
        lamports: lamportsForMint,
        programId: TOKEN_PROGRAM_ID,
      }),
      createInitializeMintInstruction(
        mint.publicKey,
        0,
        provider.wallet.publicKey,
        provider.wallet.publicKey
      )
    );
    
    console.log("–°–æ–∑–¥–∞–µ–º mint-–∞–∫–∫–∞—É–Ω—Ç...");
    const mintTx = await provider.sendAndConfirm(createMintTx, [mint]);
    console.log("Mint —Å–æ–∑–¥–∞–Ω! Transaction:", mintTx);

    // –°–æ–∑–¥–∞–µ–º ATA –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
    const tokenAccount = await getAssociatedTokenAddress(
      mint.publicKey,
      provider.wallet.publicKey
    );
    
    console.log("ATA Address:", tokenAccount.toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ATA
    try {
      await provider.connection.getAccountInfo(tokenAccount);
      console.log("ATA —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    } catch (error) {
      console.log("–°–æ–∑–¥–∞–µ–º ATA...");
      const createAtaTx = new Transaction().add(
        createAssociatedTokenAccountInstruction(
          provider.wallet.publicKey,
          tokenAccount,
          provider.wallet.publicKey,
          mint.publicKey
        )
      );
      await provider.sendAndConfirm(createAtaTx);
    }

    // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è NFT –¥–∞–Ω–Ω—ã—Ö
    const [nftDataPda] = await PublicKey.findProgramAddress(
      [Buffer.from("music_nft"), mint.publicKey.toBuffer()],
      programId
    );

    console.log("NFT Data PDA:", nftDataPda.toString());

    // –°–æ–∑–¥–∞–µ–º NFT
    console.log("–°–æ–∑–¥–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π NFT...");
    const tx = await program.methods
      .createMusicNft(
        "Devnet Track",                 // title
        "DVT",                          // symbol
        "ipfs://QmFakeMetaUri",         // uri
        "Electronic",                   // genre
        new anchor.BN(1000000000),      // price –≤ lamports (1 SOL)
        128,                            // bpm
        "C Major"                       // key
      )
      .accounts({
        authority: provider.wallet.publicKey,
        payer: provider.wallet.publicKey,
        mint: mint.publicKey,
        tokenAccount: tokenAccount,
        nftData: nftDataPda,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .rpc();

    console.log("‚úÖ NFT —Å–æ–∑–¥–∞–Ω! Transaction:", tx);
    console.log("üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

testDevnet();
