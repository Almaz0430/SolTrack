const anchor = require('@coral-xyz/anchor');
const { Connection, PublicKey } = require('@solana/web3.js');

async function testDevnet() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ devnet
    const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const version = await connection.getVersion();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –í–µ—Ä—Å–∏—è Solana:', version);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    const programId = new PublicKey('9ysQaigie6LHeqMEWGMWBYkdXFg4zyHhBnxzmZdMzG7T');
    const programInfo = await connection.getAccountInfo(programId);
    
    if (programInfo) {
      console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ devnet!');
      console.log('üì¶ –†–∞–∑–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã:', programInfo.data.length, '–±–∞–π—Ç');
      console.log('üí∞ –ë–∞–ª–∞–Ω—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã:', programInfo.lamports / 1e9, 'SOL');
    } else {
      console.log('‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ devnet');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testDevnet();
